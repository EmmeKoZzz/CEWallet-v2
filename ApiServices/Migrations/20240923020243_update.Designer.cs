// <auto-generated />
using System;
using ApiServices.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240923020243_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_bin")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ApiServices.Models.ActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("FundId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CurrencyId" }, "CurrencyId");

                    b.HasIndex(new[] { "FundId" }, "FundId");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("ApiServices.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValueUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("ApiServices.Models.Fund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("LocationUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId1");

                    b.ToTable("Fund");
                });

            modelBuilder.Entity("ApiServices.Models.FundCurrency", b =>
                {
                    b.Property<Guid>("FundId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("FundId", "CurrencyId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CurrencyId" }, "CurrencyId")
                        .HasDatabaseName("CurrencyId1");

                    b.ToTable("Fund_Currency");
                });

            modelBuilder.Entity("ApiServices.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Role");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name1");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b17c8c3-7eb1-4816-9e67-83c99becf193"),
                            Name = "Asesor"
                        },
                        new
                        {
                            Id = new Guid("d1325d30-2af4-4135-b0ac-1a7a56205c26"),
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = new Guid("078209c7-b568-4e9f-9a98-edc0495c7ed6"),
                            Name = "Administrador"
                        });
                });

            modelBuilder.Entity("ApiServices.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("tinyblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("tinyblob");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("UpdatedAt"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "RoleId");

                    b.HasIndex(new[] { "Username" }, "Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc7f232c-b2dc-4738-8dba-b15e55c8b409"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 9, 23, 2, 2, 42, 901, DateTimeKind.Utc).AddTicks(2375),
                            Email = "admin@cewallet.org",
                            PasswordHash = new byte[] { 110, 165, 198, 12, 171, 207, 237, 147, 85, 255, 137, 44, 215, 191, 80, 52, 167, 216, 61, 144, 205, 85, 73, 236, 248, 139, 39, 158, 66, 116, 176, 86 },
                            PasswordSalt = new byte[] { 35, 198, 78, 197, 191, 32, 225, 242, 60, 131, 19, 149, 77, 19, 227, 138 },
                            RoleId = new Guid("078209c7-b568-4e9f-9a98-edc0495c7ed6"),
                            UpdatedAt = new DateTime(2024, 9, 23, 2, 2, 42, 901, DateTimeKind.Utc).AddTicks(2374),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ApiServices.Models.Fund", b =>
                {
                    b.HasOne("ApiServices.Models.User", null)
                        .WithOne("Fund")
                        .HasForeignKey("ApiServices.Models.Fund", "UserId");
                });

            modelBuilder.Entity("ApiServices.Models.FundCurrency", b =>
                {
                    b.HasOne("ApiServices.Models.Currency", "Currency")
                        .WithMany("FundCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fund_Currency_ibfk_2");

                    b.HasOne("ApiServices.Models.Fund", "Fund")
                        .WithMany("FundCurrencies")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fund_Currency_ibfk_1");

                    b.Navigation("Currency");

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("ApiServices.Models.User", b =>
                {
                    b.HasOne("ApiServices.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiServices.Models.Currency", b =>
                {
                    b.Navigation("FundCurrencies");
                });

            modelBuilder.Entity("ApiServices.Models.Fund", b =>
                {
                    b.Navigation("FundCurrencies");
                });

            modelBuilder.Entity("ApiServices.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ApiServices.Models.User", b =>
                {
                    b.Navigation("Fund");
                });
#pragma warning restore 612, 618
        }
    }
}
